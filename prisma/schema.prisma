// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Category {
  GENERAL
  SPORTS
  POLITICS
  ENTERTAINMENT
  TECHNOLOGY
  EDUCATION
  HEALTH
  BUSINESS
  TRAVEL
  FOOD
  OTHER
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  password     String
  profileImage String?   // URL to profile image
  role         Role      @default(USER)
  polls        Poll[]
  votes        Vote[]
  comments     Comment[]
  createdAt    DateTime  @default(now())
}

model Poll {
  id          Int        @id @default(autoincrement())
  title       String
  category    Category   @default(GENERAL)
  tags        String?    // Comma-separated tags
  expiresAt   DateTime?  // When the poll expires and stops accepting votes
  scheduledAt DateTime?  // When the poll becomes visible (for future scheduling)
  options     PollOption[]
  comments    Comment[]
  createdBy   User       @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime   @default(now())
}

model PollOption {
  id      Int    @id @default(autoincrement())
  text    String
  poll    Poll   @relation(fields: [pollId], references: [id])
  pollId  Int
  votes   Vote[]
}

model Vote {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  pollOption PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId Int
  createdAt  DateTime   @default(now())

  @@unique([userId, pollOptionId]) // prevent duplicate votes
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  poll      Poll      @relation(fields: [pollId], references: [id])
  pollId    Int
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  Int?
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime  @default(now())
}